<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="adminMapper">
	<resultMap type="com.study.test.admin.vo.AdminMenuVO" id="adminMenu">
		<result column="MENU_CODE" 	property="menuCode"/>
		<result column="MENU_NAME" 	property="menuName"/>
		<result column="MENU_URL" 	property="menuUrl"/>
	</resultMap>
	
	<resultMap type="com.study.test.admin.vo.AdminSubMenuVO" id="adminSubMenu">
		<result column="SUB_MENU_CODE" 	property="subMenuCode"/>
		<result column="SUB_MENU_NAME" 	property="subMenuName"/>
		<result column="SUB_MENU_URL" 	property="subMenuUrl"/>
		<result column="MENU_CODE" 		property="menuCode"/>
	</resultMap>
	
	<resultMap type="com.study.test.admin.vo.EmpVO" id="emp">
		<result column="EMP_NO" 	property="empNo"/>
		<result column="EMP_TYPE" 	property="empType"/>
		<result column="DEPT_NO" 	property="deptNo"/>
		<result column="MEM_NO" 	property="memNo"/>
		<result column="MEM_NAME" 	property="memName"/>
		<result column="COLL_NO" 	property="collNo"/>
	</resultMap>
	
	<resultMap type="com.study.test.school.dept.DeptManageVO" id="deptManage">
		<result column="APPLY_NO"						property="applyNo"/>
		<result column="STU_NO" 						property="stuNo"/>
		<result column="APPLY_CODE" 					property="applyCode"/>
		<result column="APPLY_DATE" 					property="applyDate"/>
		<result column="APPLY_REASON" 					property="applyReason"/>
		<result column="APPLROVAL_DATE" 				property="applrovalDate"/>
		<result column="PROCESS_STATUS" 				property="processStatus"/>
		<result column="FROM_COLL" 						property="fromColl"/>
		<result column="TO_COLL" 						property="toColl"/>
		<result column="FROM_DEPT" 						property="fromDept"/>
		<result column="TO_DEPT" 						property="toDept"/>
		<result column="DOUBLE_MAJOR_COLL" 				property="doubleMajorColl"/>
		<result column="DOUBLE_MAJOR_DEPT"  			property="doubleMajorDept"/>
		<result column="STU_YEAR" 						property="stuYear"/>
		<result column="STU_SEM" 						property="stuSem"/>
		<result column="FROM_COLL_NAME" 				property="fromCollName"/>
		<result column="TO_COLL_NAME" 					property="toCollName"/>
		<result column="FROM_DEPT_NAME" 				property="fromDeptName"/>
		<result column="TO_DEPT_NAME" 					property="toDeptName"/>
		<result column="TO_DATE" 						property="toDate"/>
		<result column="FROM_DATE" 						property="fromDate"/>
		<result column="DOUBLE_MAJOR_COLL_NAME" 		property="doubleMajorCollName"/>
		<result column="DOUBLE_MAJOR_DEPT_NAME" 		property="doubleMajorDeptName"/>
		<association property="stuVO" 					resultMap="stuMapper.stu"/>
		<association property="memberVO" 				resultMap="memberMapper.member"/>
		<association property="colleageVO" 				resultMap="schoolMapper.colleage"/>
		<association property="deptVO" 					resultMap="schoolMapper.dept"/>
	</resultMap>
	
	<resultMap type="com.study.test.admin.vo.ProbationVO" id="probation">
		<result column="PROB_NO" 		property="probNo"/>
		<result column="STU_NO" 		property="stuNo"/>
		<result column="PROB_DATE" 		property="probDate"/>
		<result column="PROB_REASON" 	property="probReason"/>
		<result column="SEM_NO" 		property="semNo"/>
		<result column="MEM_NO" 		property="memNo"/>
		<result column="MONTH_DATA"		property="monthData"/>
		<result column="PROB_CNT"		property="probCnt"/>
	</resultMap>
	
	<resultMap type="com.study.test.admin.vo.StuOutVO" id="stuOut">
		<result column="STU_OUT_NO" 			property="stuOutNo"/>
		<result column="STU_NO" 				property="stuNo"/>
		<result column="STU_OUT_DATE" 			property="stuOutDate"/>
		<result column="STU_OUT_REASON" 		property="stuOutReason"/>
		<result column="MONTH_DATA"		property="monthData"/>
		<result column="OUT_CNT"		property="outCnt"/>
	</resultMap>
	
	<select id="getAdminMenuList" resultMap="adminMenu">
		SELECT MENU_CODE
			, MENU_NAME
			, MENU_URL
		FROM ADMIN_MENU
	</select>
	
	<select id="getAdminSubMenuList" resultMap="adminSubMenu">
		SELECT SUB_MENU_CODE
			, SUB_MENU_NAME
			, SUB_MENU_URL
			, MENU_CODE
		FROM ADMIN_SUB_MENU
		WHERE MENU_CODE = #{menuCode}
	</select>
	
	<insert id="regStu">
		INSERT INTO UNI_STU (
			STU_NO
			, COLL_NO
			, DEPT_NO
			, DOUBLE_NO
			, STU_YEAR
			, STU_SEM
			, STU_STATUS
			, MEM_NO
			, PARENT_NAME
			, PARENT_TELL
			, STU_BANK_NAME
			, STU_BANK_ACCOUNT			
		) VALUES (
			#{stuNo}
			, #{collNo}
			, #{deptNo}
			, #{doubleNo}
			, #{stuYear}
			, #{stuSem}
			, #{stuStatus}
			, #{memNo}
			, #{parentName}
			, #{parentTell}
			, #{stuBankName}
			, #{stuBankAccount}
		)
	</insert>
	
	<insert id="regEmp">
		INSERT INTO UNI_EMP (
			EMP_NO
			, EMP_TYPE
			, DEPT_NO
			, MEM_NO
			, COLL_NO
		) VALUES (
			#{empNo}
			, #{empType}
			, #{deptNo}
			, #{memNo}
			, #{collNo}
		)
	</insert>
	<!-- 전과 신청자 리스트  -->
	<select id="getDeptManageList" resultMap="deptManage">
		SELECT APPLY_NO
			, MEM.MEM_NAME AS MEM_NAME
            , MEM.MEM_NO AS MEM_NO
			, APPLY_CODE
			, TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') AS APPLY_DATE
			, APPLY_REASON
			, TO_CHAR(APPLROVAL_DATE, 'YYYY-MM-DD') AS APPLROVAL_DATE
			, PROCESS_STATUS
			, FROM_COLL
            , (SELECT COLL_NAME
                FROM COLLEAGE
                WHERE DEPT.FROM_COLL= COLLEAGE.COLL_NO) AS FROM_COLL_NAME
			, TO_COLL
            , (SELECT COLL_NAME
                FROM COLLEAGE
                WHERE DEPT.TO_COLL= COLLEAGE.COLL_NO) AS TO_COLL_NAME
			, FROM_DEPT
            , (SELECT DEPT_NAME
                FROM DEPT
                WHERE DEPT.FROM_DEPT= DEPT.DEPT_NO) AS FROM_DEPT_NAME
            , TO_DEPT
            , (SELECT DEPT_NAME
                FROM DEPT
                WHERE DEPT.TO_DEPT= DEPT.DEPT_NO) AS TO_DEPT_NAME
			, DOUBLE_MAJOR_COLL
            , (SELECT COLL_NAME
                FROM COLLEAGE
                WHERE DEPT.DOUBLE_MAJOR_COLL = COLLEAGE.COLL_NO) AS DOUBLE_MAJOR_COLL_NAME
			, DOUBLE_MAJOR_DEPT
            , (SELECT DOUBLE_DEPT_NAME
            FROM DOUBLE_MAJOR
            WHERE DEPT.DOUBLE_MAJOR_DEPT = DOUBLE_MAJOR.DOUBLE_NO) AS DOUBLE_MAJOR_DEPT_NAME
			, DEPT.STU_YEAR
			, DEPT.STU_SEM
		FROM DEPT_MANAGE DEPT, UNI_MEMBER MEM, UNI_STU STU
		WHERE MEM.MEM_NO = STU.MEM_NO
        AND DEPT.STU_NO = STU.STU_NO
        AND DEPT.FROM_DEPT IS NOT NULL
        <if test='processStatus != null and !processStatus.equals("") and !processStatus.equals("전체")'>
        AND PROCESS_STATUS = #{processStatus}
        </if>
        <if test='fromDate != null and !fromDate.equals("")'>
        AND TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') &lt;= #{fromDate}
        </if>
        <if test='toDate != null and !toDate.equals("")'>
        AND TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') &gt;= #{toDate} 
        </if>
	</select>
	
	<!-- 전과 신청자 조회 쿼리  -->
	<select id="getDeptManageData" resultMap="deptManage">
		SELECT APPLY_NO
			, MEM.MEM_NAME AS MEM_NAME
            , MEM.MEM_NO AS MEM_NO
			, APPLY_CODE
			, TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') AS APPLY_DATE
			, APPLY_REASON
			, TO_CHAR(APPLROVAL_DATE, 'YYYY-MM-DD') AS APPLROVAL_DATE
			, PROCESS_STATUS
			, FROM_COLL
            , (SELECT COLL_NAME
                FROM COLLEAGE
                WHERE DEPT.FROM_COLL= COLLEAGE.COLL_NO) AS FROM_COLL_NAME
			, TO_COLL
            , (SELECT COLL_NAME
                FROM COLLEAGE
                WHERE DEPT.TO_COLL= COLLEAGE.COLL_NO) AS TO_COLL_NAME
			, FROM_DEPT
            , (SELECT DEPT_NAME
                FROM DEPT
                WHERE DEPT.FROM_DEPT= DEPT.DEPT_NO) AS FROM_DEPT_NAME
            , TO_DEPT
            , (SELECT DEPT_NAME
                FROM DEPT
                WHERE DEPT.TO_DEPT= DEPT.DEPT_NO) AS TO_DEPT_NAME
			, DOUBLE_MAJOR_COLL
            , (SELECT COLL_NAME
                FROM COLLEAGE
                WHERE DEPT.DOUBLE_MAJOR_COLL = COLLEAGE.COLL_NO) AS DOUBLE_MAJOR_COLL_NAME
			, DOUBLE_MAJOR_DEPT
            , (SELECT DOUBLE_DEPT_NAME
            FROM DOUBLE_MAJOR
            WHERE DEPT.DOUBLE_MAJOR_DEPT = DOUBLE_MAJOR.DOUBLE_NO) AS DOUBLE_MAJOR_DEPT_NAME
			, DEPT.STU_YEAR
			, DEPT.STU_SEM
		FROM DEPT_MANAGE DEPT, UNI_MEMBER MEM, UNI_STU STU
		WHERE MEM.MEM_NO = STU.MEM_NO
        AND DEPT.STU_NO = STU.STU_NO
        AND APPLY_NO = #{applyNo}
        AND DEPT.FROM_DEPT IS NOT NULL
	</select>
	
	<!-- 신청학생 데이터 -->
	<select id="getMemInfo" resultMap="stuMapper.member">
		SELECT STU.STU_NO
			, MEM_NAME
			, MEM_TELL
			, MEM_ADDR
			, ATTACHED_FILE_NAME
			, MEM.MEM_NO
			, TO_CHAR(MEM_BIRTH, 'YYYY-MM-DD') AS MEM_BIRTH
			, MEM_ADDR_DETAIL
            , STU_STATUS
            , STU_YEAR
            , STU_SEM
            , COLL_NAME
            , STU.COLL_NO
            , DEPT_NAME
            , STU.DEPT_NO
		FROM UNI_MEMBER MEM, UNI_STU STU, MEM_IMG IMG, COLLEAGE COLL, DEPT DP
		WHERE STU.MEM_NO = MEM.MEM_NO
		AND IMG.MEM_NO = MEM.MEM_NO
		AND STU.COLL_NO = COLL.COLL_NO
		AND STU.DEPT_NO = DP.DEPT_NO
		AND MEM.MEM_NO = #{memNo}
	</select>
	<!-- 전과 신청 학생정보 업데이트 -->
	<update id="updateStuCollDept">
		UPDATE UNI_STU
		SET COLL_NO = #{collNo}
			, DEPT_NO = #{deptNo}
		WHERE STU_NO = #{stuNo}
	</update>
	<!-- 전과 신청 테이블 업데이트 -->
	<update id="updateProcessStatus">
		UPDATE DEPT_MANAGE
		SET PROCESS_STATUS = '승인완료'
			, APPLROVAL_DATE = SYSDATE
		WHERE APPLY_NO = #{applyNo}	
	</update>
	<!-- 승인 완료 안된 학생 데이터 조회 -->
	<select id="getApplyNoByStuInfoList" resultMap="deptManage">
	    SELECT TO_COLL, TO_DEPT, STU_NO
	    FROM DEPT_MANAGE
	    WHERE
	        <if test="applyNoList != null and applyNoList.size() > 0">
	            APPLY_NO IN
	            <foreach collection="applyNoList" item="applyCode" open="(" close=")" separator=",">
	                #{applyCode}
	            </foreach>
	            AND
	        </if>
	    PROCESS_STATUS NOT LIKE '승인완료'
	</select>

	<!-- 전과신청 승인 학생데이터 변경 -->
	<update id="updateStuInfoByApplyData">
		<foreach collection="stuVOList" item="stuData" open="DECLARE BEGIN" separator=";" close=";END;">
			UPDATE UNI_STU
			SET COLL_NO = #{stuData.collNo}
				, DEPT_NO = #{stuData.deptNo}
			WHERE STU_NO = #{stuData.stuNo}
		</foreach>
	</update>
	<!-- 전과신청 승인 apply데이터 변경 -->
	<update id="updateByApplyNoList">
		UPDATE DEPT_MANAGE
		SET PROCESS_STATUS = '승인완료'
			, APPLROVAL_DATE = SYSDATE
		WHERE APPLY_NO IN	
		<foreach collection="applyNoList" item="applyCode" open="(" close=")" separator=",">
		 #{applyCode}
		</foreach>
	</update>
	
	<!-- 휴학신청자리스트 조회 -->
	<select id="getLeaveManageList" resultMap="stuMapper.statusInfo">
        SELECT STATUS_NO
            , ME.MEM_NAME
            , ST.STU_NO
            , STU_YEAR
            , STU_SEM
            , COLL.COLL_NO
            , COLL_NAME
            , DP.DEPT_NO
            , DEPT_NAME
			, NOW_STATUS
			, AFTER_STATUS
            , TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') AS APPLY_DATE
			, TO_CHAR(APPROVAL_DATE, 'YYYY-MM-DD') AS APPROVAL_DATE
			, ING_STATUS
			<if test='doubleMajorVO != null'>			
            , DM.DOUBLE_NO
            , DOUBLE_COLL
            , DOUBLE_DEPT_NAME
			</if>
            , ATTACHED_FILE_NAME
        FROM STATUS_INFO ST, UNI_MEMBER ME, UNI_STU STU, COLLEAGE COLL, DEPT DP, MEM_IMG IMG
        <if test="doubleMajorVO != null">
        , DOUBLE_MAJOR DM
        </if>
        WHERE ST.STU_NO = ME.MEM_NO
        AND ST.STU_NO = STU.STU_NO
        AND STU.COLL_NO = COLL.COLL_NO
        AND STU.DEPT_NO = DP.DEPT_NO
        <if test="doubleMajorVO != null">
        AND DM.DOUBLE_NO = STU.DOUBLE_NO
        </if>
        AND IMG.MEM_NO = STU.STU_NO       
        AND AFTER_STATUS = '휴학'
        <if test='ingStatus != null and !ingStatus.equals("")'>
        AND ING_STATUS = #{ingStatus}
        </if>
        <if test='fromDate != null and !fromDate.equals("")'>
        AND TO_CHAR(APPROVAL_DATE, 'YYYY-MM-DD') &lt;= #{fromDate}
        </if>
        <if test='toDate != null and !toDate.equals("")'>
        AND TO_CHAR(APPROVAL_DATE, 'YYYY-MM-DD') &gt;= #{toDate}
        </if>        
        ORDER BY STATUS_NO DESC
	</select>
	
	<!-- 휴학 신청대상자 조회 (모달)-->
	<select id="getLeaveManageMember" resultMap="stuMapper.statusInfo">
            SELECT STATUS_NO
                , STU_NO
                , NOW_STATUS
                , AFTER_STATUS
                , TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') AS APPLY_DATE
                , TO_CHAR(APPROVAL_DATE, 'YYYY-MM-DD') AS APPROVAL_DATE
                , ING_STATUS
                , STATUS_REASON
            FROM STATUS_INFO 
            WHERE AFTER_STATUS = #{afterStatus}
            AND STATUS_NO = #{statusNo}
	</select>
	
	<!-- 신청자 학생 정보 조회 -->	
	<select id="getMemInfoByState" resultMap="stuMapper.member">
		SELECT STU_NO
			, MEM_NAME
			, MEM_TELL
			, MEM_ADDR
			, ATTACHED_FILE_NAME
			, MEM.MEM_NO
			, TO_CHAR(MEM_BIRTH, 'YYYY-MM-DD') AS MEM_BIRTH
			, MEM_ADDR_DETAIL
            , STU_STATUS
            , STU_YEAR
            , STU_SEM
            , COLL_NO
            , DEPT_NO
            , DOUBLE_NO
            , (SELECT COLL_NAME
            	FROM COLLEAGE
            	WHERE COLL_NO = STU.COLL_NO) AS COLL_NAME
            , (SELECT DEPT_NAME
            	FROM DEPT
            	WHERE DEPT_NO = STU.DEPT_NO) AS DEPT_NAME
            , (SELECT DOUBLE_DEPT_NAME
            	FROM DOUBLE_MAJOR
            	WHERE DOUBLE_NO = STU.DOUBLE_NO) AS DOUBLE_DEPT_NAME			
		FROM UNI_MEMBER MEM, UNI_STU STU, MEM_IMG IMG
		WHERE STU.MEM_NO = MEM.MEM_NO
		AND IMG.MEM_NO = MEM.MEM_NO
		AND MEM.MEM_NO = #{memNo}
	</select>

	
	<!-- 휴학신청 진행완료 업데이트 -->
	<update id="updateStatusInfoByTakeOff">
		UPDATE STATUS_INFO
		SET ING_STATUS = '승인완료'
		    , APPROVAL_DATE = SYSDATE
		WHERE STATUS_NO = #{statusNo}
	</update>
	<!-- 휴학신청 학생정보 업데이트 -->
	<update id="updateStatusInfoByStuTakeOff">
		UPDATE UNI_STU
		SET STU_STATUS = #{stuVO.stuStatus}
		WHERE STU_NO = #{stuNo}
	</update>
	
	<!-- 휴학신청 승인완료 일괄 업데이트 -->
	<update id="updateStatusNoListByTakeOff">
		UPDATE STATUS_INFO
		SET ING_STATUS = '승인완료'
		    , APPROVAL_DATE = SYSDATE
		WHERE STATUS_NO IN 
		<foreach collection="statusNoList" item="statusNo" open="(" close=")" separator=",">
			#{statusNo}
		</foreach>	
	</update>
	
	<!-- 휴학신청 학생정보 일괄 업데이트  -->
	<update id="updateStatusInfoListByStuTakeOff">
		UPDATE UNI_STU
		SET STU_STATUS = '휴학'
		WHERE STU_NO IN
		<foreach collection="stuNoList" item="stuNo" open="(" close=")" separator=",">
			#{stuNo}
		</foreach>
	</update>
	
	<!-- 복학신청자리스트 조회 -->
	<select id="getRollBackManageList" resultMap="stuMapper.statusInfo">
        SELECT STATUS_NO
            , ME.MEM_NAME
            , ST.STU_NO
            , STU_YEAR
            , STU_SEM
            , COLL.COLL_NO
            , COLL_NAME
            , DP.DEPT_NO
            , DEPT_NAME
			, NOW_STATUS
			, AFTER_STATUS
            , TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') AS APPLY_DATE
			, TO_CHAR(APPROVAL_DATE, 'YYYY-MM-DD') AS APPROVAL_DATE
			, ING_STATUS
			<if test='doubleMajorVO != null'>			
            , DM.DOUBLE_NO
            , DOUBLE_COLL
            , DOUBLE_DEPT_NAME
			</if>
            , ATTACHED_FILE_NAME
        FROM STATUS_INFO ST, UNI_MEMBER ME, UNI_STU STU, COLLEAGE COLL, DEPT DP, MEM_IMG IMG
        <if test="doubleMajorVO != null">
        , DOUBLE_MAJOR DM
        </if>
        WHERE ST.STU_NO = ME.MEM_NO
        AND ST.STU_NO = STU.STU_NO
        AND STU.COLL_NO = COLL.COLL_NO
        AND STU.DEPT_NO = DP.DEPT_NO
        <if test="doubleMajorVO != null">
        AND DM.DOUBLE_NO = STU.DOUBLE_NO
        </if>
        AND IMG.MEM_NO = STU.STU_NO
        AND AFTER_STATUS = '재학'
        <if test='ingStatus != null and !ingStatus.equals("")'>
        AND ING_STATUS = #{ingStatus}
        </if>
        <if test='fromDate != null and !fromDate.equals("")'>
        AND TO_CHAR(APPROVAL_DATE, 'YYYY-MM-DD') &lt;= #{fromDate}
        </if>
        <if test='toDate != null and !toDate.equals("")'>
        AND TO_CHAR(APPROVAL_DATE, 'YYYY-MM-DD') &gt;= #{toDate}
        </if>        
        ORDER BY STATUS_NO DESC
	</select>
	
	<!-- 복학신청 승인완료 일괄 업데이트 -->
	<update id="updateStatusNoListByTakeOn">
		UPDATE STATUS_INFO
		SET ING_STATUS = '승인완료'
		    , APPROVAL_DATE = SYSDATE
		WHERE STATUS_NO IN 
		<foreach collection="statusNoList" item="statusNo" open="(" close=")" separator=",">
			#{statusNo}
		</foreach>	
	</update>
	
	<!-- 휴학신청 학생정보 일괄 업데이트  -->
	<update id="updateStatusInfoListByStuTakeOn">
		UPDATE UNI_STU
		SET STU_STATUS = '재학'
		WHERE STU_NO IN
		<foreach collection="stuNoList" item="stuNo" open="(" close=")" separator=",">
			#{stuNo}
		</foreach>
	</update>
	
	<!--복수 전공 신청자 리스트 조회  -->
	<select id="getDoubleMajorRequestList" resultMap="deptManage">
		SELECT APPLY_NO
			, MEM.MEM_NAME
            , STU.STU_NO
			, APPLY_CODE
			, TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') AS APPLY_DATE
			, APPLY_REASON
			, TO_CHAR(APPLROVAL_DATE, 'YYYY-MM-DD') AS APPLROVAL_DATE
			, PROCESS_STATUS
			, STU.STU_YEAR
			, STU.STU_SEM
            , STU.COLL_NO
            , (SELECT COLL_NAME
                FROM COLLEAGE
                WHERE COLL_NO = STU.COLL_NO) AS COLL_NAME
            , STU.DEPT_NO
            , (SELECT DEPT_NAME
                FROM DEPT
                WHERE DEPT_NO = STU.DEPT_NO) AS DEPT_NAME
            , DOUBLE_MAJOR_COLL
            , (SELECT COLL_NAME
                FROM COLLEAGE
                WHERE COLL_NO = DEPT.DOUBLE_MAJOR_COLL) AS DOUBLE_MAJOR_COLL_NAME
            , DOUBLE_MAJOR_DEPT
            , (SELECT DEPT_NAME
                FROM DEPT
                WHERE DEPT_NO = DEPT.DOUBLE_MAJOR_DEPT) AS DOUBLE_MAJOR_DEPT_NAME
		FROM DEPT_MANAGE DEPT, UNI_MEMBER MEM, UNI_STU STU, COLLEAGE COLL, DEPT DP
		WHERE MEM.MEM_NO = STU.MEM_NO
        AND DEPT.STU_NO = STU.STU_NO
        AND DP.DEPT_NO = STU.DEPT_NO
        AND COLL.COLL_NO = STU.COLL_NO
        AND DEPT.FROM_DEPT IS NULL
        <if test='processStatus != null and !processStatus.equals("")'>
        AND PROCESS_STATUS = #{processStatus}
        </if>
        <if test='fromDate != null and !fromDate.equals("")'>
        AND TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') &lt;= #{fromDate}
        </if>
        <if test='toDate != null and !toDate.equals("")'>
        AND TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') &gt;= #{toDate} 
        </if>
	</select>
	
	<!-- 복수전공 신청자 조회 쿼리  -->
	<select id="getDoubletManageData" resultMap="deptManage">
		SELECT APPLY_NO
			, MEM.MEM_NAME AS MEM_NAME
            , MEM.MEM_NO AS MEM_NO
			, APPLY_CODE
			, TO_CHAR(APPLY_DATE, 'YYYY-MM-DD') AS APPLY_DATE
			, APPLY_REASON
			, TO_CHAR(APPLROVAL_DATE, 'YYYY-MM-DD') AS APPLROVAL_DATE
			, PROCESS_STATUS
			, DEPT.STU_YEAR
			, DEPT.STU_SEM
			, DEPT_NAME
			, DOUBLE_MAJOR_COLL
			, DOUBLE_MAJOR_DEPT
		FROM DEPT_MANAGE DEPT, UNI_MEMBER MEM, UNI_STU STU, DEPT DP
		WHERE MEM.MEM_NO = STU.MEM_NO
        AND DEPT.STU_NO = STU.STU_NO
        AND STU.DEPT_NO = DP.DEPT_NO
        AND APPLY_NO = #{applyNo}
        AND DEPT.FROM_DEPT IS NULL
	</select>
	
	<!--업데이트할 DOUBLE_NO코드 가져오기  -->
	<select id="getDoubleNo" resultType="String">
		SELECT DOUBLE_NO
		FROM DOUBLE_MAJOR
		WHERE DOUBLE_NO LIKE '%'||#{doubleMajorDeptNo}||'%' 
	</select>
		
	<!-- 복수전공 대상자 dept_manage 업데이트 -->
	<update id="updateDoubleMajor">
		UPDATE DEPT_MANAGE
		SET PROCESS_STATUS = '승인완료'
			, APPLROVAL_DATE = SYSDATE
		WHERE APPLY_NO = #{applyNo}
	</update>
	
	<!-- 복수전공 대상자 uni_stu 업데이트  -->
	<update id="updateStuDouble">
		UPDATE UNI_STU
		SET DOUBLE_NO = #{stuVO.doubleNo}
		WHERE STU_NO = #{stuVO.stuNo}
	</update>
	
	<!-- 일괄 승인 DOUBLE_NO 코드 가져오기 -->
	<select id="getDoubleNoByDeptList" resultMap="schoolMapper.doubleMajor">
	  SELECT DOUBLE_NO
	  FROM DOUBLE_MAJOR
	  WHERE
	    <foreach collection="doubleMajorDeptNoList" item="doubleDeptNo" separator="OR">
	      DOUBLE_NO LIKE ('%'||#{doubleDeptNo}|| '%')
	    </foreach>
	</select>
	
	<!-- 복수 전공 대상자 dept_manage 업데이트 -->
	<update id="updateDoubleMajorList">
		UPDATE DEPT_MANAGE
		SET PROCESS_STATUS = '승인완료'
			, APPLROVAL_DATE = SYSDATE
		WHERE APPLY_NO IN
		<foreach collection="applyNoList" item="applyNo" open="(" close=")" separator=",">
			#{applyNo}
		</foreach>
	</update>
	
	<!-- 복수 전공 대상자 학생정보 업데이트  -->
	<update id="updateDoubleMajorStudentList">
		<foreach collection="stuVOList" item="stuData" open="DECLARE BEGIN" separator=";" close=";END;">
			UPDATE UNI_STU
			SET DOUBLE_NO = #{stuData.doubleNo}
			WHERE STU_NO = #{stuData.stuNo}
		</foreach>
	</update>
	
	<!-- 학사경고 학생목록 조회  -->
	<select id="getProbStuList" resultMap="stuMapper.member">
		SELECT MEM.MEM_NO
        , MEM_NAME
        , STU.STU_NO
        , DP.DEPT_NO
        , DEPT_NAME
        , STU_STATUS
        , COLL.COLL_NO
        , COLL_NAME
        <if test='stuVO.stuStatus.equals("제적")'>
        , TO_CHAR(STU_OUT_DATE, 'YYYY-MM-DD') AS STU_OUT_DATE
        </if>
        , (SELECT COUNT(PROB_NO)
                        FROM ACADEMIC_PROBATION
                        WHERE STU_NO = STU.STU_NO) AS PROB_CNT
        FROM UNI_MEMBER MEM, UNI_STU STU, DEPT DP, COLLEAGE COLL
        <if test='stuVO.stuStatus.equals("제적")'>
        , STU_OUT OUT
        </if>
        WHERE MEM.MEM_NO = STU.MEM_NO
        AND STU.DEPT_NO = DP.DEPT_NO
        AND STU.COLL_NO = COLL.COLL_NO
        <if test='stuVO.stuStatus.equals("제적")'>
        AND STU.STU_NO = OUT.STU_NO
        </if>
        <if test='memName != null and !memName.equals("")'>
        AND UPPER(MEM_NAME) LIKE '%' || UPPER(#{memName}) || '%'
        </if>
        <if test='stuVO.collNo != null and !stuVO.collNo.equals("")'>
        AND STU.COLL_NO = #{stuVO.collNo}
        </if>
        <if test='stuVO.deptNo != null and !stuVO.deptNo.equals("")'>
        AND STU.DEPT_NO = #{stuVO.deptNo}
        </if>
        <if test='stuVO.stuStatus != null and !stuVO.stuStatus.equals("")'>
        AND STU_STATUS = #{stuVO.stuStatus}
        </if>
	</select>
	
	<!-- 학사경고 현황 학생별 조회  -->
	<select id="getProbationStu" resultMap="probation">
		SELECT PROB_NO
            , STU_NO
            , TO_CHAR(PROB_DATE, 'YYYY-MM-DD') AS PROB_DATE
            , PROB_REASON
            , SEM_NO
            , MEM_NO
        FROM ACADEMIC_PROBATION
        WHERE MEM_NO = #{memNo}
	</select>
	
	<!--학기번호 매칭하기  -->
	<select id="getSemesterNo" resultType="String">
		SELECT SEM_NO
		FROM SEMESTER
		WHERE SEM_YEAR = #{semYear}
		AND SEMESTER = #{semester}
	</select>
	
	<!-- 학사경고 실행  -->
	<insert id="regProbStu">
		INSERT INTO ACADEMIC_PROBATION (
		      PROB_NO
		      , STU_NO
		      , PROB_DATE
		      , PROB_REASON
		      , SEM_NO
		      , MEM_NO
		) VALUES(
		      (SELECT 'PROB_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(PROB_NO, 6))), 0) +1, LENGTH(NVL(MAX(TO_NUMBER(SUBSTR(PROB_NO, 6))), 0) +1) , '0')
				FROM ACADEMIC_PROBATION)
		      , #{stuNo}
		      , SYSDATE
		      , #{probReason}
		      , #{semNo}
		      , #{memNo}
		)
	</insert>
	
	<!-- 제적처리 제적 테이블-->
	<insert id="regStuOut">
		INSERT INTO STU_OUT (
			STU_OUT_NO
			, STU_NO
			, STU_OUT_DATE
			, STU_OUT_REASON
		) VALUES (
			(SELECT 'OUT_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(STU_OUT_NO, 5))), 0) +1, LENGTH(NVL(MAX(TO_NUMBER(SUBSTR(STU_OUT_NO, 5))), 0) +1) , '0')
				FROM STU_OUT)
			, #{stuNo}
			, SYSDATE
			, #{stuOutReason}
		)
	</insert>
	
	<!-- 제적처리 학생 테이블 -->
	<update id="setStuOut">
		UPDATE UNI_STU
		SET STU_STATUS = '제적'
		WHERE STU_NO = #{stuNo}
	</update>
	
	<!-- 통계 쿼리 학적변동 승인 수-->
	<select id="getAcceptCntList" resultMap="stuMapper.statusInfo">
		SELECT TO_CHAR(DATES.DATE_VALUE, 'YYYY-MM-DD') AS ACCEPT_DATE
       , COUNT(STATUS_NO) AS DATA_CNT
		FROM (
		  SELECT TO_DATE(#{acceptDate}, 'YYYY-MM-DD') + LEVEL - 1 AS DATE_VALUE
		  FROM DUAL
		  CONNECT BY LEVEL &lt;= TO_DATE(#{lastDay}, 'YYYY-MM-DD') - TO_DATE(#{acceptDate}, 'YYYY-MM-DD') + 1
		) DATES
		LEFT OUTER JOIN STATUS_INFO ON TO_CHAR(DATES.DATE_VALUE, 'YYYY-MM-DD') = TO_CHAR(APPROVAL_DATE, 'YYYY-MM-DD')
		                           AND ING_STATUS = '승인완료'
		WHERE DATES.DATE_VALUE &gt;= TO_DATE(#{acceptDate}, 'YYYY-MM-DD')
		      AND DATES.DATE_VALUE &lt;= TRUNC(TO_DATE(#{lastDay}))
		GROUP BY TO_CHAR(DATES.DATE_VALUE, 'YYYY-MM-DD')
		ORDER BY ACCEPT_DATE
	</select>
	
	<!-- 통계 쿼리 학적변동 전체 데이터 수-->
	<select id="getDataCntList" resultMap="stuMapper.statusInfo">
		SELECT TO_CHAR(DATES.DATE_VALUE, 'YYYY-MM-DD') AS ACCEPT_DATE
       , COUNT(STATUS_NO) AS DATA_CNT
		FROM (
		  SELECT TO_DATE(#{acceptDate}, 'YYYY-MM-DD') + LEVEL - 1 AS DATE_VALUE
		  FROM DUAL
		  CONNECT BY LEVEL &lt;= TO_DATE(#{lastDay}, 'YYYY-MM-DD') - TO_DATE(#{acceptDate}, 'YYYY-MM-DD') + 1
		) DATES
		LEFT OUTER JOIN STATUS_INFO ON TO_CHAR(DATES.DATE_VALUE, 'YYYY-MM-DD') = TO_CHAR(APPROVAL_DATE, 'YYYY-MM-DD')
		
		WHERE DATES.DATE_VALUE &gt;= TO_DATE(#{acceptDate}, 'YYYY-MM-DD')
		      AND DATES.DATE_VALUE &lt;= TRUNC(TO_DATE(#{lastDay}))
		GROUP BY TO_CHAR(DATES.DATE_VALUE, 'YYYY-MM-DD')
		ORDER BY ACCEPT_DATE
	</select>
	
	<!-- 학사경고 통계 쿼리 -->
	<select id="getProbStatisticsData" resultMap="probation">
		SELECT TO_CHAR(MONTHS.MONTH, 'MM') AS MONTH_DATA
				, NVL(COUNT(PROB_NO), 0) AS PROB_CNT
		FROM (
		    SELECT ADD_MONTHS(TO_DATE('2023-01-01', 'YYYY-MM-DD'), LEVEL - 1) AS MONTH
		    FROM DUAL
		    CONNECT BY LEVEL &lt;= 12
		) MONTHS
		LEFT JOIN ACADEMIC_PROBATION ON TO_CHAR(ACADEMIC_PROBATION.PROB_DATE, 'MM') = TO_CHAR(MONTHS.MONTH, 'MM')
		WHERE MONTHS.MONTH &gt;= TO_DATE('2023-01-01', 'YYYY-MM-DD') AND MONTHS.MONTH &lt;= TO_DATE('2023-12-31', 'YYYY-MM-DD')
		GROUP BY TO_CHAR(MONTHS.MONTH, 'MM')
		ORDER BY TO_CHAR(MONTHS.MONTH, 'MM')
	</select>
	
	<!-- 제적 통계 쿼리 -->
	<select id="getOutStatisticsData" resultMap="stuOut">
		SELECT TO_CHAR(MONTHS.MONTH, 'MM') AS MONTH_DATA, NVL(COUNT(STU_OUT_NO), 0) AS OUT_CNT
		FROM (
		    SELECT ADD_MONTHS(TO_DATE('2023-01-01', 'YYYY-MM-DD'), LEVEL - 1) AS MONTH
		    FROM DUAL
		    CONNECT BY LEVEL &lt;= 12
		) MONTHS
		LEFT JOIN STU_OUT ON TO_CHAR(STU_OUT.STU_OUT_DATE, 'MM') = TO_CHAR(MONTHS.MONTH, 'MM')
		WHERE MONTHS.MONTH &gt;= TO_DATE('2023-01-01', 'YYYY-MM-DD') AND MONTHS.MONTH &lt;= TO_DATE('2023-12-31', 'YYYY-MM-DD')
		GROUP BY TO_CHAR(MONTHS.MONTH, 'MM')
		ORDER BY TO_CHAR(MONTHS.MONTH, 'MM')
	</select>
	<!-- 다음에 들어갈 카테고리 코드 조회  -->
	<select id="getNextCateNo" resultType="String">
		SELECT 'CATE_'||LPAD(NVL(MAX(TO_NUMBER(SUBSTR(CATE_NO, 6))), 0) +1 , 3, '0')
	    FROM BOARD_CATEGORY
	</select>
	
	<!-- 게시판 카테고리 등록 -->
	<insert id="regCateNo">
		INSERT INTO BOARD_CATEGORY (
			CATE_NO
			, CATE_NAME
			, IS_USE
		) VALUES (
	         #{cateNo}
			, #{cateName}
			, #{isUse}
		)
	</insert>
	
	<!-- 카테고리 사용여부 변경 -->
	<update id="setIsUseByCateNo">
		UPDATE BOARD_CATEGORY
		SET IS_USE = #{isUse}
		WHERE CATE_NO = #{cateNo}
	</update>
	
	<!--카테고리 삭제  -->
	<delete id="delBoardCategory">
		DELETE BOARD_CATEGORY
		WHERE CATE_NO IN
		<foreach collection="cateNoList" item="cateNo" open="(" close=")" separator=",">
			#{cateNo}
		</foreach>
	</delete>
	
	<!--회원의 비밀번호 검증  -->
	<select id="countMemPw" resultType="int">
		SELECT COUNT(MEM_NO)
		FROM UNI_MEMBER
		WHERE MEM_NO = #{memNo}
		AND MEM_PW = #{memPw}
	</select>
	<!-- 비밀번호 변경  -->
	<update id="changePw">
		UPDATE UNI_MEMBER
		SET MEM_PW = #{memPw}
		WHERE MEM_NO = #{memNo}
	</update>
	
</mapper>


























